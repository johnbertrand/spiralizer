
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Spiralizer</title>

  



	   
		<%= javascript_include_tag :defaults , 'data-turbolinks-track' => true%>
		<%= csrf_meta_tag %>
		
		<script src="https://code.createjs.com/easeljs-0.8.2.min.js"></script>
		<script src="https://code.createjs.com/tweenjs-0.6.2.min.js"></script>
		<script src="https://code.createjs.com/preloadjs-0.6.2.min.js"></script>




		<script>
		
		
	
	
	
		var image_path = '<%= asset_path 'flower.jpg' %>'
		
		var START_X = 500;
		var START_Y = 500;

		var canvasID="mainCanvas";

		var originalBitmap;

		var currentFrame;

		var tmp;

		var stage;

		var spirals = [] ;

		var spiral;

		var spiralEvents = [];

		var startTime;

		var tickHandler;

		var spiraledJson;

		var playbackEvents = [];


		if(typeof(String.prototype.trim) === "undefined")
		{
		    String.prototype.trim = function() 
		    {
		        return String(this).replace(/^\s+|\s+$/g, '');
		    };
		}




		///SpiralEvent Object
		function SpiralEvent(imgUrl,x,y,eventTime){
			this.imgUrl = imgUrl;
			this.x = x;
			this.y = y;
			this.eventTime = eventTime;
		}



		//Image Object
		function Spiral(bitmap,x,y){
  
		  this.bitmap = bitmap;
		  this.angle = 0 ;
		  this.x = x;
		  this.y = y;
  
		}


		Spiral.prototype.bitmap = function(){
			return this.bitmap;
		}

		Spiral.prototype.name = function(){
		  return this.bitmap.image.src;
		}

		Spiral.prototype.update = function(){
			//this.bitmap.image.width/2, this.bitmap.image.height/2
			this.bitmap.setTransform(this.x, this.y, this.bitmap.scaleX * .9995, this.bitmap.scaleX * .9995, this.angle-= .14 );
			//console.log (this.bitmap.scaleX +","+this.bitmap.scaleY )
		}

		Spiral.prototype.getRand=function(){
		 return Math.floor(Math.random() * (3)) + 0;
		}

		///End Image Object



		function tick(event) {

			//copy current frame 
			//shrink current frame
			//paste current frame on to self
			//stage.addChild(currentFrame);
	
			//currentFrame.update();
	
	
	
	
			var i=0;
			for (i=0;i<spirals.length;i++){
				spirals[i].update();
		
			}
			stage.update();

		}

		function playBack(event) {
			var n = new Date();
	
			if (playbackEvents.length > 0) {
				console.log(playbackEvents[0].eventTime);
				var tx = n.getTime() - startTime;
				console.log("tx: "+ tx);
				if (playbackEvents[0].eventTime < n.getTime() - startTime){
					var pe = playbackEvents.shift();
			
					spirals.push(new Spiral(originalBitmap.clone() ,pe.x, pe.y));
					stage.addChild(spirals[spirals.length-1].bitmap);
				}
		
			}
	
	
			console.log('spirals ');
			console.log(spirals);
	
			var i=0;
			for (i=0;i<spirals.length;i++){
				spirals[i].update();
			}
	
			stage.update();

		}


		function handleFileComplete(ev) {
	
			originalBitmap =  new createjs.Bitmap(ev.result);
	
			spirals.push(new Spiral(originalBitmap.clone(),START_X,START_Y));
	
			spiralEvents.push(new SpiralEvent("DUMMY",START_X,START_Y,0));
	
			stage.addChild(spirals[length].bitmap);
	

		    tickHandler = createjs.Ticker.on("tick", tick);
		    createjs.Ticker.setFPS(60);
	
			var d = new Date();
			startTime = d.getTime();
	
		}


		function exportSpirals(){
			//JSON.stringify(spiralEvents)
			myWindow = window.open();
			myWindow.document.body.innerHTML = JSON.stringify(spiralEvents);
			myWindow.focus( );
	
		}


		function resetAll(){
			console.log("Resting");
			createjs.Ticker.off("tick",tickHandler);
			createjs.Ticker.off("tick", playBack);
			stage.removeAllChildren();
	
			//Clean up
			stage.clear();
			spiralEvents=[];
			spirals=[];
	
			var d = new Date();
			startTime = d.getTime();
	
		    tickHandler = createjs.Ticker.on("tick", playBack);
		    createjs.Ticker.setFPS(60);
	
		}


		function importSpirals(){
			console.log("Importing");
	
			//Kill Old Ticker
			createjs.Ticker.off("tick",tickHandler);
			createjs.Ticker.off("tick", playBack);
	
			//Clean up
			stage.clear();
			spiralEvents=[];
			spirals=[];
	
	
			//Read the json of the spiral evetns from the textbo
			var parsed = JSON.parse(document.getElementById('out').value.trim()); //Change to texst box
			console.log(parsed);
	
			console.log('looping');
			playbackEvents =parsed;

			//var i = 0;
			//while (i < parsed.length -1 ){
			//    playbackEvents.push(new SpiralEvent(parsed[i].imgUrl,parsed[i].x,parsed[i].y,parsed[i].eventTime))	;
			//	i = i + 1;
		//	}
	
	
			var d = new Date();
			startTime = d.getTime();
	
		    tickHandler = createjs.Ticker.on("tick", playBack);
		    createjs.Ticker.setFPS(60);
	
		}


		function exportToBitmap(){
			var canvas = document.getElementById( 'mainCanvas' );
			var bitmap = new createjs.Bitmap( canvas );
    
			bitmap.cache( 0, 0, canvas.width, canvas.height, 1 );
			var base64 = bitmap.getCacheDataURL();

			myWindow = window.open(base64);
			myWindow.focus();

		}

		function resetSpirals(){
			resetAll();
	
		}

		function init()
		{
	
			canvas = document.getElementById(canvasID);
		    canvas.width  = document.body.clientWidth; 
		    canvas.height = document.body.clientHeight;

		    stage  = new createjs.Stage(canvasID);
			stage.autoClear = false;
	
	
		    var preload = new createjs.LoadQueue();
		    preload.addEventListener("fileload", handleFileComplete);
		  	preload.loadFile({ src:image_path, type:createjs.AbstractLoader.IMAGE});
	
			stage.on("stagemousedown", function(evt) {
		
		    	//console.log("the canvas was clicked at "+evt.stageX+","+evt.stageY);
		
				spirals.push(new Spiral(originalBitmap.clone() ,evt.stageX,evt.stageY));
	
				stage.addChild(spirals[spirals.length-1].bitmap);
		
				var n = new Date();
		
				spiralEvents.push(new SpiralEvent("DUMMY",evt.stageX,evt.stageY,n.getTime()-startTime));
		
				console.log(spiralEvents);
		    });


	


  
	

		}




		</script>

		<style>
		html,body{ margin:0; 
			       padding:0; 
				   height:100%;
				   width:100%; }

		#full-size{
		  height:100%;
		  width:100%;
		  overflow:hidden; 
		  background-color: #00FF00; 
  
		}

			  .box1{
				  	  width:10px; 
					  height:20px; 
				  }
			   
			.box2 { pointer-events:none;
				    background:#FFF;  
				    position:relative; 
					z-index:2; 
				   	margin: 0 auto; 
					width:100%;
					top: 25%;
					opacity:0.5;
		   
				   } 
     
			   	.box3 { pointer-events:none;
			   		    position:relative; 
			   			z-index:3; 
			   		   	margin: 0 auto; 
			   			width:10%;
			   			top: 25%;
					  } 
	
					  button, a{
						  pointer-events:all;
					  }
			  

		</style>
		
		
		
  </head>

  <body onload="init();" >

    <!-- Fixed navbar -->
    <nav class="navbar navbar-default navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Spiralizer</a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li><a href="#" onclick="exportToBitmap();" >:Export</a></li>
			<li><a href="#" onclick="resetSpirals();"   >:Reset</a> </li>
			<li><a href="#" onclick="changeImage();"   >:Image</a> </li>
			<li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">:JSON <span class="caret"></span></a>
              <ul class="dropdown-menu">
                <li><a href="#">:Import</a></li>
                <li><a href="#">:Export</a></li>
                <li role="separator" class="divider"></li>
                <li class="dropdown-header">Nav header</li>
                <li><a href="#">Separated link</a></li>
                <li><a href="#">One more separated link</a></li>
              </ul>
            </li>
			<li id="logged_in_menu">
			</li>
          </ul>
		  <ul class="nav navbar-nav navbar-right" id="user_area">
			   <% if user_signed_in? %>
			     <li>
			     <%= link_to('Logout', destroy_user_session_path, :method => :delete) %>        
			     </li>
			   <%else%>
			  
		         <li><p class="navbar-text">Already have an account?</p></li>
		         <li class="dropdown">
		           <a href="#" class="dropdown-toggle" data-toggle="dropdown"><b>Login</b> <span class="caret"></span></a>
		 			<ul id="login-dp" class="dropdown-menu">
		 				<li>
		 					 <div class="row">
		 							<div class="col-md-12">
		 								Login via
		 								<div class="social-buttons">
		 									<a href="#" class="btn btn-fb"><i class="fa fa-facebook"></i> Facebook</a>
		 									<a href="#" class="btn btn-tw"><i class="fa fa-twitter"></i> Twitter</a>
		 								</div>
		                                 or
										
										 <%= form_for(resource, 
										 as: resource_name, 
										 url: session_path(resource_name), 
										 remote: true)  do |f|
										 %>
		 									 <div class="form-group">
		 							           <%=f.label  "Email address", 
											        :class=>'sr-only',
													:for=>"exampleInputEmail2" %>
													
												<%=f.email_field :email, 
													:class=>'form-control',
													:placeholder=>'Email Address',
													:id=>'exampleInputEmail2', 
													:required => true %>
													 
		 									 </div>
		 										<div class="form-group">
	 		 							           <%=f.label  "Password", 
	 											        :class=>'sr-only',
	 													:for=>"exampleInputPassword2" %>
													<%=f.password_field :password, 
														:class=>'form-control',
														:placeholder=>'Password',
														:id=>'exampleInputPassword2', 
														:required => true %>
													
		                                              <div class="help-block text-right"><a href="">Forget the password ?</a></div>
		 										</div>
		 										<div class="form-group">
		 											 <button type="submit" class="btn btn-primary btn-block">Sign in</button>
		 										</div>
		 										<div class="checkbox">
		 											 <label>
		 											 <input type="checkbox"> keep me logged-in
		 											 </label>
		 										</div>
		 								 </form>
										 <% end %>
		 							</div>
		 							<div class="bottom text-center">
		 								New here ? <a href="#"><b>Join Us</b></a>
		 							</div>
		 					 </div>
		 				</li>
		 			</ul>
		         </li>
				 <% end %>
		       </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div>

	<div class="box1" ><canvas id="mainCanvas"></canvas></div>
   
   
	<div class="box3" id="output" ></div>


    </div> 

    
  </body>
</html>
